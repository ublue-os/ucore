ARG COREOS_VERSION="${COREOS_VERSION}"

FROM quay.io/fedora/fedora-coreos:${COREOS_VERSION} as builder

ARG COREOS_VERSION="${COREOS_VERSION}"
ARG ZFS_VERSION="${ZFS_VERSION}"

WORKDIR /tmp

#We can't use the `uname -r` as it will pick up the host kernel version
RUN rpm -qa kernel --queryformat '%{VERSION}-%{RELEASE}.%{ARCH}' > /kernel-version.txt

# work around to allow alternatives to configure in RPM post-install scripts
RUN mkdir -p /var/lib/alternatives

# enable testing repos if not enabled on testing stream
RUN if [[ "testing" == "${COREOS_VERSION}" ]]; then \
for REPO in $(ls /etc/yum.repos.d/fedora-updates-testing{,-modular}.repo); do \
  if [[ "$(grep enabled=1 ${REPO} > /dev/null; echo $?)" == "1" ]]; then \
    echo "enabling $REPO" &&\
    sed -i '0,/enabled=0/{s/enabled=0/enabled=1/}' ${REPO}; \
  fi; \
done; \
fi

RUN rpm-ostree install -y jq dkms gcc make autoconf automake libtool rpm-build libtirpc-devel libblkid-devel \
    libuuid-devel libudev-devel openssl-devel zlib-devel libaio-devel libattr-devel elfutils-libelf-devel \
    kernel-$(cat /kernel-version.txt) kernel-modules-$(cat /kernel-version.txt) kernel-devel-$(cat /kernel-version.txt) \
    python3 python3-devel python3-setuptools python3-cffi libffi-devel git ncompress libcurl-devel

RUN echo "getting ${ZFS_VERSION}.tar.gz" && \
    curl -L -O https://github.com/openzfs/zfs/releases/download/${ZFS_VERSION}/${ZFS_VERSION}.tar.gz \
    && tar xzf ${ZFS_VERSION}.tar.gz

WORKDIR /tmp/${ZFS_VERSION}

# build
RUN ./configure \
        -with-linux=/usr/src/kernels/$(cat /kernel-version.txt)/ \
        -with-linux-obj=/usr/src/kernels/$(cat /kernel-version.txt)/ \
    && make -j 1 rpm-utils rpm-kmod \
    || (cat config.log && exit 1)

# sort into directories for easier install later
RUN mkdir -p /tmp/rpms/{debug,devel,other,src} \
    && mv *src.rpm /tmp/rpms/src/ \
    && mv *devel*.rpm /tmp/rpms/devel/ \
    && mv *debug*.rpm /tmp/rpms/debug/ \
    && mv zfs-dracut*.rpm /tmp/rpms/other/ \
    && mv zfs-test*.rpm /tmp/rpms/other/ \
    && mv *.rpm /tmp/rpms/
RUN find /tmp/rpms | sort


FROM scratch

# Copy build RPMs
COPY --from=builder /tmp/rpms/ /
